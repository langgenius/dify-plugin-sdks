identity:
  name: issue_comment_created
  author: langgenius
  label:
    en_US: Issue Comment Created
    zh_Hans: Issue 评论创建
    ja_JP: Issue コメント作成

description:
  human:
    en_US: Triggers when a comment is created on an issue or pull request
    zh_Hans: 当在 issue 或 pull request 上创建评论时触发
    ja_JP: issue または pull request にコメントが作成されたときにトリガーがアクティブになります。
  llm:
    en_US: This trigger activates when a new comment is created on an issue or pull request in a GitHub repository, providing information about the comment, the issue/PR, repository, and user who created it.
    zh_Hans: 当在 GitHub 仓库的 issue 或 pull request 上创建新评论时，此触发器会被激活，提供有关评论、issue/PR、仓库和创建评论的用户的信息。
    ja_JP: GitHub リポジトリの issue または pull request に新しいコメントが作成されたときにトリガーがアクティブになり、コメント、issue/PR、リポジトリ、およびコメントを作成したユーザーに関する情報を提供します。
parameters:
- name: comment_body_contains
  label:
    en_US: Comment Body Contains
    zh_Hans: 评论内容包含
    ja_JP: コメント本文に含む
  type: string
  required: false
  description:
    en_US: "Only trigger if comment contains these keywords (e.g., LGTM, approved, needs-changes, comma-separated). Leave empty for no content filtering."
    zh_Hans: "仅当评论包含这些关键词时触发（例如：LGTM, approved, needs-changes，逗号分隔）。留空则不过滤内容。"
    ja_JP: "コメントにこれらのキーワードが含まれる場合のみトリガー（例: LGTM, approved, needs-changes，カンマ区切り）。空の場合は内容フィルタなし。"

- name: commenter
  label:
    en_US: Commenter
    zh_Hans: 评论者
    ja_JP: コメント作成者
  type: string
  required: false
  description:
    en_US: "Only trigger if commented by these users (e.g., reviewer-1, bot-user, team-member, comma-separated). Leave empty to allow any user."
    zh_Hans: "仅当由这些用户评论时触发（例如：reviewer-1, bot-user, team-member，逗号分隔）。留空则允许任何用户。"
    ja_JP: "これらのユーザーによってコメントされた場合のみトリガー（例: reviewer-1, bot-user, team-member，カンマ区切り）。空の場合は全てのユーザーを許可。"

- name: issue_labels
  label:
    en_US: Issue/PR Labels
    zh_Hans: Issue/PR 标签
    ja_JP: Issue/PR ラベル
  type: string
  required: false
  description:
    en_US: "Only trigger if the issue/PR has these labels (e.g., bug, feature, needs-review, comma-separated). Leave empty for no label filtering."
    zh_Hans: "仅当 issue/PR 有这些标签时触发（例如：bug, feature, needs-review，逗号分隔）。留空则不过滤标签。"
    ja_JP: "issue/PR がこれらのラベルを持つ場合のみトリガー（例: bug, feature, needs-review，カンマ区切り）。空の場合はラベルフィルタなし。"

- name: issue_state
  label:
    en_US: Issue/PR State
    zh_Hans: Issue/PR 状态
    ja_JP: Issue/PR の状態
  type: select
  required: false
  description:
    en_US: "Only trigger for specific issue/PR states. Leave empty for all states."
    zh_Hans: "仅对特定 issue/PR 状态触发。留空则对所有状态触发。"
    ja_JP: "特定の issue/PR 状態のみトリガー。空の場合は全ての状態でトリガー。"
  options:
    - value: open
      label:
        en_US: Open
        zh_Hans: 打开
        ja_JP: オープン
    - value: closed
      label:
        en_US: Closed
        zh_Hans: 关闭
        ja_JP: クローズ

- name: is_pull_request
  label:
    en_US: Is Pull Request
    zh_Hans: 是否为 Pull Request
    ja_JP: Pull Request かどうか
  type: boolean
  required: false
  description:
    en_US: "Filter by comment type: true for PR comments only, false for issue comments only. Leave empty for both."
    zh_Hans: "按评论类型过滤：true 仅 PR 评论，false 仅 issue 评论。留空则两者都允许。"
    ja_JP: "コメントタイプでフィルタ：true は PR コメントのみ、false は issue コメントのみ。空の場合は両方。"

output_schema:
  type: object
  properties:
    comment:
      type: object
      description: The comment that was created
      properties:
        id:
          type: integer
          description: Unique identifier of the comment
        body:
          type: string
          description: Content of the comment
        user:
          type: object
          description: User who created the comment
          properties:
            login:
              type: string
            id:
              type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        html_url:
          type: string
          format: uri
      required:
      - id
      - body
      - user
      - created_at
      - html_url

    issue:
      type: object
      description: The issue or pull request that was commented on
      required:
      - id
      - number
      - title
      - state
      - user
      - html_url

    repository:
      type: object
      description: The repository where the comment was created
      required:
      - id
      - node_id
      - name
      - full_name
      - owner
      - html_url

    sender:
      type: object
      description: The user who triggered the event
      required:
      - id
      - login
      - type

  required:
  - comment
  - issue
  - repository
  - sender

extra:
  python:
    source: events/issue_comment/issue_comment_created.py
